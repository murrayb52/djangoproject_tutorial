from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.urls import reverse
from django.views import generic


from .models import Choice, Question
from django.utils import timezone


# ListView abstracts the concepts of “display a list of objects”
class IndexView(generic.ListView):
    # Similarly, the ListView generic view uses a default template called
    # <app name>/<model name>_list.html; we use template_name to tell ListView to use our existing
    # "polls/index.html" template.
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions."""
        # Question.objects.filter(pub_date__lte=timezone.now()) returns a queryset containing Questions
        # whose pub_date is less than or equal to - that is, earlier than or equal to - timezone.now.
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]


# DetailView abstracts the concept of “display a detail page for a particular type of object.”
class DetailView(generic.DetailView):
    # Each generic view needs to know what model it will be acting upon. This is provided using the
    # model attribute.
    model = Question
    # By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html.
    # In our case, it would use the template "polls/question_detail.html". The template_name attribute is
    # used to tell Django to use a specific template name instead of the autogenerated default template
    # name.
    template_name = 'polls/detail.html'

    # Even though future questions don’t appear in the index, users can still reach them if they know
    # or guess the right URL. So we need to add a similar constraint to DetailView.
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(generic.DetailView):
    model = Question
    # We also specify the template_name for the results list view – this ensures that the results view
    # and the detail view have a different appearance when rendered, even though they’re both a
    # DetailView behind the scenes.
    template_name = 'polls/results.html'


def vote(request, question_id):
    # Fetch our Question object from models.py and store in variable 'question'
    question = get_object_or_404(Question, pk=question_id)
    try:
        # request.POST is a dictionary-like object that lets you access submitted data by
        # key name. In this case, request.POST['selection'] returns the ID of the selected
        # choice, as a string (from detail.html). request.POST values are always strings.
        selected_choice = question.choice_set.get(pk=request.POST['selection'])
    # request.POST['choice'] will raise KeyError if choice wasn’t provided in POST data.
    # The code checks for KeyError and redisplays the question form with an error message
    # if choice isn’t given.
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.

        # After incrementing the choice count, the code returns an HttpResponseRedirect
        # rather than a normal HttpResponse. HttpResponseRedirect takes a single argument:
        # the URL to which the user will be redirected

        # The reverse() function helps avoid having to hardcode a URL in the view
        # function. It is given the name of the view that we want to pass control
        # to and the variable portion of the URL pattern that points to that view.
        # In this case, using the URLconf we set up in Tutorial 3, this reverse()
        # call will return a string like: '/polls/3/results/' where the 3 is the
        # value of question.id. This redirected URL will then call the 'results'
        # view to display the final page.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))





